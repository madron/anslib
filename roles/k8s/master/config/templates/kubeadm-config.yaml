apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ ansible_host }}
  bindPort: 6443
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: {{ inventory_hostname }}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiServer:
{% if k8s_master_api_server_args %}
  extraArgs:
{% for key, value in k8s_master_api_server_args.items() %}
    {{ key }}: "{{ value }}"
{% endfor %}
{% endif %}
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controlPlaneEndpoint: k8s-api.mtk.zone:7443
controllerManager: {}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
    extraArgs:
      advertise-client-urls: https://{{ ansible_host }}:2379
      initial-advertise-peer-urls: https://{{ ansible_host }}:2380
      initial-cluster: {% for host in k8s_master_hosts[0:k8s_master_order] %}{{ hostvars[host]['inventory_hostname'] }}=https://{{ hostvars[host]['ansible_host'] }}:2380{% if not loop.last%},{% endif %}{% endfor %}

{% if not k8s_master_order == 1 %}
      initial-cluster-state: existing
{% endif %}
      listen-client-urls: https://127.0.0.1:2379,https://{{ ansible_host }}:2379
      listen-peer-urls: https://{{ ansible_host }}:2380
    peerCertSANs:
    - {{ ansible_host }}
    serverCertSANs:
    - {{ ansible_host }}
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: v1.17.0
networking:
  dnsDomain: cluster.local
{% if k8s_pod_cidr %}
  podSubnet: {{ k8s_pod_cidr }}
{% endif %}
  serviceSubnet: 10.96.0.0/12
scheduler: {}
