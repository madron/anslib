#!/usr/bin/env python

# {{ ansible_managed }}

import argparse
import commands
import logging
import os
import sys
import subprocess
import paramiko
import rdiff_backup.Main
from StringIO import StringIO

BACKUP_DIR = '/var/backups'
LOG_DIR = '/var/log'
DEFAULT_USER = 'root'
DEFAULT_PORT = 22


def get_logger(sysout, host):
    logger = logging.getLogger('rdiff-backup')
    logger.setLevel(logging.DEBUG)
    formatter_string = '%(asctime)s ' + host + ' %(levelname)-5s %(message)s'
    if sysout:
        formatter = logging.Formatter(formatter_string, '%H:%M:%S')
        handler = logging.StreamHandler()
        handler.setLevel(logging.DEBUG)
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    else:
        formatter = logging.Formatter(formatter_string, '%Y-%m-%d %H:%M:%S')
        info_file = os.path.join(LOG_DIR, 'rdiff-backup-info.log')
        info_handler = logging.FileHandler(info_file)
        info_handler.setLevel(logging.INFO)
        info_handler.setFormatter(formatter)
        logger.addHandler(info_handler)
        error_file = os.path.join(LOG_DIR, 'rdiff-backup-error.log')
        error_handler = logging.FileHandler(error_file)
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(formatter)
        logger.addHandler(error_handler)
    return logger


def get_ssh_client(host, port, user):
    known_hosts_file = os.path.join(os.path.expanduser('~'), '.ssh', 'known_hosts')
    client = paramiko.SSHClient()
    client.load_host_keys(known_hosts_file)
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(host, port=port, username=user)
    return client


def remote_command(ssh_client, command):
    logger.info("Executing remote command: '%s'" % command)
    stdin, stdout, stderr = ssh_client.exec_command(command)
    rc = stdout.channel.recv_exit_status()
    stdout_lines = [l.rstrip() for l in stdout.readlines()]
    stderr_lines = [l.rstrip() for l in stderr.readlines()]
    for line in stdout_lines:
        logger.info(line)
    for line in stderr_lines:
        logger.error(line)
    return rc, stdout.read(), stderr.read()


def rdiff_backup_command(logger, args):
    logger.debug('rdiff_backup_command arguments: %s' % args)
    original_stdout = sys.stdout
    original_stderr = sys.stderr
    stdout = StringIO()
    stderr = StringIO()
    sys.stdout = stdout
    sys.stderr = stderr
    try:
        rdiff_backup.Main.error_check_Main(args)
    except:
        pass
    finally:
        sys.stdout = original_stdout
        sys.stderr = original_stderr
        stdout.seek(0)
        stderr.seek(0)
        stdout_lines = [l.rstrip() for l in stdout.readlines()]
        stderr_lines = [l.rstrip() for l in stderr.readlines()]
    for line in stdout_lines:
        logger.info(line)
    for line in stderr_lines:
        logger.error(line)
    rc = 1 if stderr_lines else 0
    return rc


def run(**kwargs):
    logger = get_logger(kwargs['sysout'], kwargs['host'])
    logger.info('=' * 50)
    logger.info('Backup started.')
    logger.debug(kwargs)
    kwargs['logger'] = logger
    host = kwargs['host']
    port = kwargs['port']
    user = kwargs['user']
    destination = kwargs['destination']
    pre_execute_commands = kwargs['pre_execute_commands']
    if host == 'localhost' and pre_execute_commands:
        logger.error('pre_execute_commands not supported on localhost')
        return
    try:
        # Connection check and pre-exececute-commands
        if not host == 'localhost':
            ssh_client = get_ssh_client(host, port, user)
            for command in pre_execute_commands:
                rc, out, err = remote_command(ssh_client, command)
            ssh_client.close()
        # Backup
        backup(**kwargs)
        # Check
        check_backup(**kwargs)
        # Clean
        clean_backup(**kwargs)
    except:
        logger.exception('Unexpected error')
    logger.info('Backup finished.')


def backup(**kwargs):
    logger = kwargs['logger']
    host = kwargs['host']
    port = kwargs['port']
    user = kwargs['user']
    includes = kwargs['includes']
    excludes = kwargs['excludes']
    destination = kwargs['destination']
    args = [
        '--create-full-path',
        '--print-statistics',
    ]
    for path in excludes:
        args.append('--exclude')
        args.append(path)
    for path in includes:
        args.append('--include')
        args.append(path)
    args.extend(['--exclude', '/'])
    if host == 'localhost':
        args.append('/')
    else:
        args.append('--remote-schema')
        args.append('ssh -C -p %d ' % port + '%s rdiff-backup --server')
        args.append('%s@%s::/' % (user, host))
    args.append(os.path.join(destination, host))
    return rdiff_backup_command(logger, args)


def check_backup(**kwargs):
    logger = kwargs['logger']
    host = kwargs['host']
    includes = kwargs['includes']
    destination = kwargs['destination']
    rc = 0
    for remote_path in includes:
        path = os.path.join(destination, host, remote_path.lstrip('/'))
        logger.info("Checking path: '%s'" % path)
        if not os.path.exists(path):
            rc = 1
            logger.error("Path '%s' does not exist on remote host" % remote_path)
    return rc


def clean_backup(**kwargs):
    logger = kwargs['logger']
    host = kwargs['host']
    destination = kwargs['destination']
    days = kwargs['retain_days']
    if not days:
        logger.info('retain-days parameter not supplied: not removing old backups.')
        return
    logger.info('Removing backups older than %d days.' % days)
    args = []
    args.append('--force')
    args.append('--remove-older-than')
    args.append('%dD' % days)
    args.append(os.path.join(destination, host))
    return rdiff_backup_command(logger, args)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='rdiff-backup.')
    parser.add_argument('--host', metavar='HOSTNAME', type=str, required=True,
                       help='Host to backup')
    parser.add_argument('--port', metavar='PORT', type=int, default=DEFAULT_PORT,
                       help='Ssh port')
    parser.add_argument('--user', metavar='USER', type=str, default=DEFAULT_USER,
                       help='Ssh user')
    parser.add_argument('--includes', metavar='PATH', type=str, nargs='+',
                       required=True, help='Paths to backup')
    parser.add_argument('--excludes', metavar='PATH', type=str, nargs='+',
                       default=[], help='Paths to exclude from backup')
    parser.add_argument('--destination', metavar='DEST', type=str,
                       default=BACKUP_DIR, help='Base destination directory')
    parser.add_argument('--pre-execute-commands', metavar='COMMAND',
                       type=str, nargs='+', default=[],
                       help='Commands to execute on remote host')
    parser.add_argument('--retain-days', metavar='DAYS', type=int,
                       help='Remove backups older than specified days')
    parser.add_argument('--sysout', action='store_true', default=False,
                       help='Log to sysout')

    kwargs = vars(parser.parse_args())
    run(**kwargs)
